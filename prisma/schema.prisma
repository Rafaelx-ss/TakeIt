generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categorias {
  categoriaID          Int       @id @default(autoincrement())
  nombreCategoria      String    @db.VarChar(255)
  descripcionCategoria String    @db.VarChar(255)
  activoCategoria      Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoCategoria      Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  createdAt            DateTime  @default(now()) @db.Timestamp(0)
  updatedAt            DateTime? @default(now()) @db.Timestamp(0)
  createdById          Int
  updatedById          Int?
  eventos              eventos[]
}

model direccionesusuarios {
  direccionesUsuariosID Int       @id @default(autoincrement())
  usuarioID             Int
  cpDireccion           String    @db.VarChar(250)
  municipioDireccion    String    @db.VarChar(250)
  estadoID              Int
  direccion             String    @db.VarChar(250)
  createdAt             DateTime  @default(now()) @db.Timestamp(0)
  updatedAt             DateTime? @default(now()) @db.Timestamp(0)
  activoDireccion       Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoDireccion       Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  usuarios              usuarios  @relation(fields: [usuarioID], references: [usuarioID], onUpdate: Restrict, map: "direccionesusuarios_ibfk_1")
  estados               estados   @relation(fields: [estadoID], references: [estadoID], onUpdate: Restrict, map: "direccionesusuarios_ibfk_2")

  @@index([usuarioID], map: "direccionesusuarios_ibfk_1")
  @@index([estadoID], map: "direccionesusuarios_ibfk_2")
}

model estados {
  estadoID            Int                   @id @default(autoincrement())
  nombreEstado        String                @db.VarChar(100)
  paisID              Int
  activoEstado        Boolean               @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoEstado        Boolean               @default(dbgenerated("(b'1')")) @db.Bit(1)
  direccionesusuarios direccionesusuarios[]
  paises              paises                @relation(fields: [paisID], references: [paisID], onUpdate: Restrict, map: "estados_ibfk_1")

  @@index([paisID], map: "paisID")
}

model eventos {
  eventosID                 Int            @id @default(autoincrement())
  patrocinadorID            Int
  categoriaID               Int
  subCategoriaID            Int
  nombreEvento              String         @db.VarChar(255)
  lugarEvento               String         @db.VarChar(255)
  maximoParticipantesEvento String?        @db.VarChar(255)
  costoEvento               Decimal?       @db.Decimal(10, 2)
  descripcionEvento         String?        @db.VarChar(255)
  cpEvento                  String         @db.VarChar(255)
  municioEvento             String         @db.VarChar(255)
  estadoID                  String         @db.VarChar(255)
  direccionEvento           String         @db.VarChar(255)
  telefonoEvento            String         @db.VarChar(255)
  fechaEvento               String         @db.VarChar(255)
  horaEvento                String         @db.VarChar(255)
  duracionEvento            String         @db.VarChar(255)
  kitEvento                 String?        @db.VarChar(255)
  createdAt                 DateTime       @default(now()) @db.Timestamp(0)
  updatedAt                 DateTime?      @default(now()) @db.Timestamp(0)
  createdById               Int
  updatedById               Int
  activoEvento              Boolean        @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoEvento              Boolean        @default(dbgenerated("(b'1')")) @db.Bit(1)
  patrocinadores            patrocinadores @relation(fields: [patrocinadorID], references: [patrocinadorID], onUpdate: Restrict, map: "eventos_ibfk_1")
  categorias                categorias     @relation(fields: [categoriaID], references: [categoriaID], onUpdate: Restrict, map: "eventos_ibfk_2")
  subcategorias             subcategorias  @relation(fields: [subCategoriaID], references: [subcategoriaID], onUpdate: Restrict, map: "eventos_ibfk_3")

  @@index([patrocinadorID], map: "eventos_ibfk_1")
  @@index([categoriaID], map: "eventos_ibfk_2")
  @@index([subCategoriaID], map: "eventos_ibfk_3")
}

model paises {
  paisID     Int       @id @default(autoincrement())
  nombrePais String    @db.VarChar(100)
  activoPais Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoPais Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estados    estados[]
}

model patrocinadores {
  patrocinadorID                  Int       @id @default(autoincrement())
  fotoPatrocinador                Bytes?
  nombrePatrocinador              String    @db.VarChar(255)
  representantePatrocinador       String    @db.VarChar(255)
  rfcPatrocinador                 String    @db.VarChar(255)
  correoPatrocinador              String    @db.VarChar(255)
  telefonoPatrocinador            String    @db.VarChar(255)
  numeroRepresentantePatrocinador String    @db.VarChar(255)
  createdAt                       DateTime  @default(now()) @db.Timestamp(0)
  createdById                     Int
  updatedAt                       DateTime? @default(now()) @db.Timestamp(0)
  updatedById                     Int?
  activoPatrocinador              Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoPatrocinador              Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  eventos                         eventos[]
}

model subcategorias {
  subcategoriaID          Int       @id @default(autoincrement())
  nombreSubcategoria      String    @db.VarChar(255)
  descripcionSubcategoria String    @db.VarChar(255)
  activoSubcategoria      Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoSubcategoria      Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  createdAt               DateTime  @default(now()) @db.Timestamp(0)
  updatedAt               DateTime? @default(now()) @db.Timestamp(0)
  createdById             Int
  updatedById             Int?
  eventos                 eventos[]
}

model usuarios {
  usuarioID              Int                   @id @default(autoincrement())
  nombreUsuario          String                @db.VarChar(250)
  usuario                String                @unique(map: "usuario") @db.VarChar(250)
  correoUsuario          String                @unique(map: "correoUsuario") @db.VarChar(250)
  contrasena             String                @db.VarChar(400)
  rolUsuario             String                @db.VarChar(250)
  telefonoUsuario        String                @db.VarChar(250)
  fechaNacimientoUsuario String?               @db.VarChar(250)
  generoUsuario          String?               @db.VarChar(250)
  createdAt              DateTime              @default(now()) @db.Timestamp(0)
  updatedAt              DateTime?             @default(now()) @db.Timestamp(0)
  activoUsuario          Boolean               @default(dbgenerated("(b'1')")) @db.Bit(1)
  estadoUsuario          Boolean               @default(dbgenerated("(b'1')")) @db.Bit(1)
  direccionesusuarios    direccionesusuarios[]
}
